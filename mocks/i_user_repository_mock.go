package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.com/amiiit/arco/user.IUserRepository -o ./i_user_repository_mock.go

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_user "gitlab.com/amiiit/arco/user"
)

// IUserRepositoryMock implements user.IUserRepository
type IUserRepositoryMock struct {
	t minimock.Tester

	funcCreateUser          func(ctx context.Context, user mm_user.User) (u1 mm_user.User, err error)
	inspectFuncCreateUser   func(ctx context.Context, user mm_user.User)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mIUserRepositoryMockCreateUser

	funcGetUserByID          func(ctx context.Context, username string) (u1 mm_user.User, err error)
	inspectFuncGetUserByID   func(ctx context.Context, username string)
	afterGetUserByIDCounter  uint64
	beforeGetUserByIDCounter uint64
	GetUserByIDMock          mIUserRepositoryMockGetUserByID

	funcGetUserByUsername          func(ctx context.Context, username string) (u1 mm_user.User, err error)
	inspectFuncGetUserByUsername   func(ctx context.Context, username string)
	afterGetUserByUsernameCounter  uint64
	beforeGetUserByUsernameCounter uint64
	GetUserByUsernameMock          mIUserRepositoryMockGetUserByUsername
}

// NewIUserRepositoryMock returns a mock for user.IUserRepository
func NewIUserRepositoryMock(t minimock.Tester) *IUserRepositoryMock {
	m := &IUserRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mIUserRepositoryMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*IUserRepositoryMockCreateUserParams{}

	m.GetUserByIDMock = mIUserRepositoryMockGetUserByID{mock: m}
	m.GetUserByIDMock.callArgs = []*IUserRepositoryMockGetUserByIDParams{}

	m.GetUserByUsernameMock = mIUserRepositoryMockGetUserByUsername{mock: m}
	m.GetUserByUsernameMock.callArgs = []*IUserRepositoryMockGetUserByUsernameParams{}

	return m
}

type mIUserRepositoryMockCreateUser struct {
	mock               *IUserRepositoryMock
	defaultExpectation *IUserRepositoryMockCreateUserExpectation
	expectations       []*IUserRepositoryMockCreateUserExpectation

	callArgs []*IUserRepositoryMockCreateUserParams
	mutex    sync.RWMutex
}

// IUserRepositoryMockCreateUserExpectation specifies expectation struct of the IUserRepository.CreateUser
type IUserRepositoryMockCreateUserExpectation struct {
	mock    *IUserRepositoryMock
	params  *IUserRepositoryMockCreateUserParams
	results *IUserRepositoryMockCreateUserResults
	Counter uint64
}

// IUserRepositoryMockCreateUserParams contains parameters of the IUserRepository.CreateUser
type IUserRepositoryMockCreateUserParams struct {
	ctx  context.Context
	user mm_user.User
}

// IUserRepositoryMockCreateUserResults contains results of the IUserRepository.CreateUser
type IUserRepositoryMockCreateUserResults struct {
	u1  mm_user.User
	err error
}

// Expect sets up expected params for IUserRepository.CreateUser
func (mmCreateUser *mIUserRepositoryMockCreateUser) Expect(ctx context.Context, user mm_user.User) *mIUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("IUserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &IUserRepositoryMockCreateUserExpectation{}
	}

	mmCreateUser.defaultExpectation.params = &IUserRepositoryMockCreateUserParams{ctx, user}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the IUserRepository.CreateUser
func (mmCreateUser *mIUserRepositoryMockCreateUser) Inspect(f func(ctx context.Context, user mm_user.User)) *mIUserRepositoryMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for IUserRepositoryMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by IUserRepository.CreateUser
func (mmCreateUser *mIUserRepositoryMockCreateUser) Return(u1 mm_user.User, err error) *IUserRepositoryMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("IUserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &IUserRepositoryMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &IUserRepositoryMockCreateUserResults{u1, err}
	return mmCreateUser.mock
}

//Set uses given function f to mock the IUserRepository.CreateUser method
func (mmCreateUser *mIUserRepositoryMockCreateUser) Set(f func(ctx context.Context, user mm_user.User) (u1 mm_user.User, err error)) *IUserRepositoryMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the IUserRepository.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the IUserRepository.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the IUserRepository.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mIUserRepositoryMockCreateUser) When(ctx context.Context, user mm_user.User) *IUserRepositoryMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("IUserRepositoryMock.CreateUser mock is already set by Set")
	}

	expectation := &IUserRepositoryMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &IUserRepositoryMockCreateUserParams{ctx, user},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up IUserRepository.CreateUser return parameters for the expectation previously defined by the When method
func (e *IUserRepositoryMockCreateUserExpectation) Then(u1 mm_user.User, err error) *IUserRepositoryMock {
	e.results = &IUserRepositoryMockCreateUserResults{u1, err}
	return e.mock
}

// CreateUser implements user.IUserRepository
func (mmCreateUser *IUserRepositoryMock) CreateUser(ctx context.Context, user mm_user.User) (u1 mm_user.User, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, user)
	}

	mm_params := &IUserRepositoryMockCreateUserParams{ctx, user}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_got := IUserRepositoryMockCreateUserParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("IUserRepositoryMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the IUserRepositoryMock.CreateUser")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, user)
	}
	mmCreateUser.t.Fatalf("Unexpected call to IUserRepositoryMock.CreateUser. %v %v", ctx, user)
	return
}

// CreateUserAfterCounter returns a count of finished IUserRepositoryMock.CreateUser invocations
func (mmCreateUser *IUserRepositoryMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of IUserRepositoryMock.CreateUser invocations
func (mmCreateUser *IUserRepositoryMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to IUserRepositoryMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mIUserRepositoryMockCreateUser) Calls() []*IUserRepositoryMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*IUserRepositoryMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *IUserRepositoryMock) MinimockCreateUserDone() bool {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *IUserRepositoryMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserRepositoryMock.CreateUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserRepositoryMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to IUserRepositoryMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		m.t.Error("Expected call to IUserRepositoryMock.CreateUser")
	}
}

type mIUserRepositoryMockGetUserByID struct {
	mock               *IUserRepositoryMock
	defaultExpectation *IUserRepositoryMockGetUserByIDExpectation
	expectations       []*IUserRepositoryMockGetUserByIDExpectation

	callArgs []*IUserRepositoryMockGetUserByIDParams
	mutex    sync.RWMutex
}

// IUserRepositoryMockGetUserByIDExpectation specifies expectation struct of the IUserRepository.GetUserByID
type IUserRepositoryMockGetUserByIDExpectation struct {
	mock    *IUserRepositoryMock
	params  *IUserRepositoryMockGetUserByIDParams
	results *IUserRepositoryMockGetUserByIDResults
	Counter uint64
}

// IUserRepositoryMockGetUserByIDParams contains parameters of the IUserRepository.GetUserByID
type IUserRepositoryMockGetUserByIDParams struct {
	ctx      context.Context
	username string
}

// IUserRepositoryMockGetUserByIDResults contains results of the IUserRepository.GetUserByID
type IUserRepositoryMockGetUserByIDResults struct {
	u1  mm_user.User
	err error
}

// Expect sets up expected params for IUserRepository.GetUserByID
func (mmGetUserByID *mIUserRepositoryMockGetUserByID) Expect(ctx context.Context, username string) *mIUserRepositoryMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("IUserRepositoryMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &IUserRepositoryMockGetUserByIDExpectation{}
	}

	mmGetUserByID.defaultExpectation.params = &IUserRepositoryMockGetUserByIDParams{ctx, username}
	for _, e := range mmGetUserByID.expectations {
		if minimock.Equal(e.params, mmGetUserByID.defaultExpectation.params) {
			mmGetUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByID.defaultExpectation.params)
		}
	}

	return mmGetUserByID
}

// Inspect accepts an inspector function that has same arguments as the IUserRepository.GetUserByID
func (mmGetUserByID *mIUserRepositoryMockGetUserByID) Inspect(f func(ctx context.Context, username string)) *mIUserRepositoryMockGetUserByID {
	if mmGetUserByID.mock.inspectFuncGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("Inspect function is already set for IUserRepositoryMock.GetUserByID")
	}

	mmGetUserByID.mock.inspectFuncGetUserByID = f

	return mmGetUserByID
}

// Return sets up results that will be returned by IUserRepository.GetUserByID
func (mmGetUserByID *mIUserRepositoryMockGetUserByID) Return(u1 mm_user.User, err error) *IUserRepositoryMock {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("IUserRepositoryMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &IUserRepositoryMockGetUserByIDExpectation{mock: mmGetUserByID.mock}
	}
	mmGetUserByID.defaultExpectation.results = &IUserRepositoryMockGetUserByIDResults{u1, err}
	return mmGetUserByID.mock
}

//Set uses given function f to mock the IUserRepository.GetUserByID method
func (mmGetUserByID *mIUserRepositoryMockGetUserByID) Set(f func(ctx context.Context, username string) (u1 mm_user.User, err error)) *IUserRepositoryMock {
	if mmGetUserByID.defaultExpectation != nil {
		mmGetUserByID.mock.t.Fatalf("Default expectation is already set for the IUserRepository.GetUserByID method")
	}

	if len(mmGetUserByID.expectations) > 0 {
		mmGetUserByID.mock.t.Fatalf("Some expectations are already set for the IUserRepository.GetUserByID method")
	}

	mmGetUserByID.mock.funcGetUserByID = f
	return mmGetUserByID.mock
}

// When sets expectation for the IUserRepository.GetUserByID which will trigger the result defined by the following
// Then helper
func (mmGetUserByID *mIUserRepositoryMockGetUserByID) When(ctx context.Context, username string) *IUserRepositoryMockGetUserByIDExpectation {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("IUserRepositoryMock.GetUserByID mock is already set by Set")
	}

	expectation := &IUserRepositoryMockGetUserByIDExpectation{
		mock:   mmGetUserByID.mock,
		params: &IUserRepositoryMockGetUserByIDParams{ctx, username},
	}
	mmGetUserByID.expectations = append(mmGetUserByID.expectations, expectation)
	return expectation
}

// Then sets up IUserRepository.GetUserByID return parameters for the expectation previously defined by the When method
func (e *IUserRepositoryMockGetUserByIDExpectation) Then(u1 mm_user.User, err error) *IUserRepositoryMock {
	e.results = &IUserRepositoryMockGetUserByIDResults{u1, err}
	return e.mock
}

// GetUserByID implements user.IUserRepository
func (mmGetUserByID *IUserRepositoryMock) GetUserByID(ctx context.Context, username string) (u1 mm_user.User, err error) {
	mm_atomic.AddUint64(&mmGetUserByID.beforeGetUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByID.afterGetUserByIDCounter, 1)

	if mmGetUserByID.inspectFuncGetUserByID != nil {
		mmGetUserByID.inspectFuncGetUserByID(ctx, username)
	}

	mm_params := &IUserRepositoryMockGetUserByIDParams{ctx, username}

	// Record call args
	mmGetUserByID.GetUserByIDMock.mutex.Lock()
	mmGetUserByID.GetUserByIDMock.callArgs = append(mmGetUserByID.GetUserByIDMock.callArgs, mm_params)
	mmGetUserByID.GetUserByIDMock.mutex.Unlock()

	for _, e := range mmGetUserByID.GetUserByIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetUserByID.GetUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByID.GetUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByID.GetUserByIDMock.defaultExpectation.params
		mm_got := IUserRepositoryMockGetUserByIDParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByID.t.Errorf("IUserRepositoryMock.GetUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByID.GetUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByID.t.Fatal("No results are set for the IUserRepositoryMock.GetUserByID")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetUserByID.funcGetUserByID != nil {
		return mmGetUserByID.funcGetUserByID(ctx, username)
	}
	mmGetUserByID.t.Fatalf("Unexpected call to IUserRepositoryMock.GetUserByID. %v %v", ctx, username)
	return
}

// GetUserByIDAfterCounter returns a count of finished IUserRepositoryMock.GetUserByID invocations
func (mmGetUserByID *IUserRepositoryMock) GetUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.afterGetUserByIDCounter)
}

// GetUserByIDBeforeCounter returns a count of IUserRepositoryMock.GetUserByID invocations
func (mmGetUserByID *IUserRepositoryMock) GetUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.beforeGetUserByIDCounter)
}

// Calls returns a list of arguments used in each call to IUserRepositoryMock.GetUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByID *mIUserRepositoryMockGetUserByID) Calls() []*IUserRepositoryMockGetUserByIDParams {
	mmGetUserByID.mutex.RLock()

	argCopy := make([]*IUserRepositoryMockGetUserByIDParams, len(mmGetUserByID.callArgs))
	copy(argCopy, mmGetUserByID.callArgs)

	mmGetUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByIDDone returns true if the count of the GetUserByID invocations corresponds
// the number of defined expectations
func (m *IUserRepositoryMock) MinimockGetUserByIDDone() bool {
	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByID != nil && mm_atomic.LoadUint64(&m.afterGetUserByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetUserByIDInspect logs each unmet expectation
func (m *IUserRepositoryMock) MinimockGetUserByIDInspect() {
	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserRepositoryMock.GetUserByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserByIDCounter) < 1 {
		if m.GetUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserRepositoryMock.GetUserByID")
		} else {
			m.t.Errorf("Expected call to IUserRepositoryMock.GetUserByID with params: %#v", *m.GetUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByID != nil && mm_atomic.LoadUint64(&m.afterGetUserByIDCounter) < 1 {
		m.t.Error("Expected call to IUserRepositoryMock.GetUserByID")
	}
}

type mIUserRepositoryMockGetUserByUsername struct {
	mock               *IUserRepositoryMock
	defaultExpectation *IUserRepositoryMockGetUserByUsernameExpectation
	expectations       []*IUserRepositoryMockGetUserByUsernameExpectation

	callArgs []*IUserRepositoryMockGetUserByUsernameParams
	mutex    sync.RWMutex
}

// IUserRepositoryMockGetUserByUsernameExpectation specifies expectation struct of the IUserRepository.GetUserByUsername
type IUserRepositoryMockGetUserByUsernameExpectation struct {
	mock    *IUserRepositoryMock
	params  *IUserRepositoryMockGetUserByUsernameParams
	results *IUserRepositoryMockGetUserByUsernameResults
	Counter uint64
}

// IUserRepositoryMockGetUserByUsernameParams contains parameters of the IUserRepository.GetUserByUsername
type IUserRepositoryMockGetUserByUsernameParams struct {
	ctx      context.Context
	username string
}

// IUserRepositoryMockGetUserByUsernameResults contains results of the IUserRepository.GetUserByUsername
type IUserRepositoryMockGetUserByUsernameResults struct {
	u1  mm_user.User
	err error
}

// Expect sets up expected params for IUserRepository.GetUserByUsername
func (mmGetUserByUsername *mIUserRepositoryMockGetUserByUsername) Expect(ctx context.Context, username string) *mIUserRepositoryMockGetUserByUsername {
	if mmGetUserByUsername.mock.funcGetUserByUsername != nil {
		mmGetUserByUsername.mock.t.Fatalf("IUserRepositoryMock.GetUserByUsername mock is already set by Set")
	}

	if mmGetUserByUsername.defaultExpectation == nil {
		mmGetUserByUsername.defaultExpectation = &IUserRepositoryMockGetUserByUsernameExpectation{}
	}

	mmGetUserByUsername.defaultExpectation.params = &IUserRepositoryMockGetUserByUsernameParams{ctx, username}
	for _, e := range mmGetUserByUsername.expectations {
		if minimock.Equal(e.params, mmGetUserByUsername.defaultExpectation.params) {
			mmGetUserByUsername.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByUsername.defaultExpectation.params)
		}
	}

	return mmGetUserByUsername
}

// Inspect accepts an inspector function that has same arguments as the IUserRepository.GetUserByUsername
func (mmGetUserByUsername *mIUserRepositoryMockGetUserByUsername) Inspect(f func(ctx context.Context, username string)) *mIUserRepositoryMockGetUserByUsername {
	if mmGetUserByUsername.mock.inspectFuncGetUserByUsername != nil {
		mmGetUserByUsername.mock.t.Fatalf("Inspect function is already set for IUserRepositoryMock.GetUserByUsername")
	}

	mmGetUserByUsername.mock.inspectFuncGetUserByUsername = f

	return mmGetUserByUsername
}

// Return sets up results that will be returned by IUserRepository.GetUserByUsername
func (mmGetUserByUsername *mIUserRepositoryMockGetUserByUsername) Return(u1 mm_user.User, err error) *IUserRepositoryMock {
	if mmGetUserByUsername.mock.funcGetUserByUsername != nil {
		mmGetUserByUsername.mock.t.Fatalf("IUserRepositoryMock.GetUserByUsername mock is already set by Set")
	}

	if mmGetUserByUsername.defaultExpectation == nil {
		mmGetUserByUsername.defaultExpectation = &IUserRepositoryMockGetUserByUsernameExpectation{mock: mmGetUserByUsername.mock}
	}
	mmGetUserByUsername.defaultExpectation.results = &IUserRepositoryMockGetUserByUsernameResults{u1, err}
	return mmGetUserByUsername.mock
}

//Set uses given function f to mock the IUserRepository.GetUserByUsername method
func (mmGetUserByUsername *mIUserRepositoryMockGetUserByUsername) Set(f func(ctx context.Context, username string) (u1 mm_user.User, err error)) *IUserRepositoryMock {
	if mmGetUserByUsername.defaultExpectation != nil {
		mmGetUserByUsername.mock.t.Fatalf("Default expectation is already set for the IUserRepository.GetUserByUsername method")
	}

	if len(mmGetUserByUsername.expectations) > 0 {
		mmGetUserByUsername.mock.t.Fatalf("Some expectations are already set for the IUserRepository.GetUserByUsername method")
	}

	mmGetUserByUsername.mock.funcGetUserByUsername = f
	return mmGetUserByUsername.mock
}

// When sets expectation for the IUserRepository.GetUserByUsername which will trigger the result defined by the following
// Then helper
func (mmGetUserByUsername *mIUserRepositoryMockGetUserByUsername) When(ctx context.Context, username string) *IUserRepositoryMockGetUserByUsernameExpectation {
	if mmGetUserByUsername.mock.funcGetUserByUsername != nil {
		mmGetUserByUsername.mock.t.Fatalf("IUserRepositoryMock.GetUserByUsername mock is already set by Set")
	}

	expectation := &IUserRepositoryMockGetUserByUsernameExpectation{
		mock:   mmGetUserByUsername.mock,
		params: &IUserRepositoryMockGetUserByUsernameParams{ctx, username},
	}
	mmGetUserByUsername.expectations = append(mmGetUserByUsername.expectations, expectation)
	return expectation
}

// Then sets up IUserRepository.GetUserByUsername return parameters for the expectation previously defined by the When method
func (e *IUserRepositoryMockGetUserByUsernameExpectation) Then(u1 mm_user.User, err error) *IUserRepositoryMock {
	e.results = &IUserRepositoryMockGetUserByUsernameResults{u1, err}
	return e.mock
}

// GetUserByUsername implements user.IUserRepository
func (mmGetUserByUsername *IUserRepositoryMock) GetUserByUsername(ctx context.Context, username string) (u1 mm_user.User, err error) {
	mm_atomic.AddUint64(&mmGetUserByUsername.beforeGetUserByUsernameCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByUsername.afterGetUserByUsernameCounter, 1)

	if mmGetUserByUsername.inspectFuncGetUserByUsername != nil {
		mmGetUserByUsername.inspectFuncGetUserByUsername(ctx, username)
	}

	mm_params := &IUserRepositoryMockGetUserByUsernameParams{ctx, username}

	// Record call args
	mmGetUserByUsername.GetUserByUsernameMock.mutex.Lock()
	mmGetUserByUsername.GetUserByUsernameMock.callArgs = append(mmGetUserByUsername.GetUserByUsernameMock.callArgs, mm_params)
	mmGetUserByUsername.GetUserByUsernameMock.mutex.Unlock()

	for _, e := range mmGetUserByUsername.GetUserByUsernameMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetUserByUsername.GetUserByUsernameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByUsername.GetUserByUsernameMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByUsername.GetUserByUsernameMock.defaultExpectation.params
		mm_got := IUserRepositoryMockGetUserByUsernameParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByUsername.t.Errorf("IUserRepositoryMock.GetUserByUsername got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByUsername.GetUserByUsernameMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByUsername.t.Fatal("No results are set for the IUserRepositoryMock.GetUserByUsername")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetUserByUsername.funcGetUserByUsername != nil {
		return mmGetUserByUsername.funcGetUserByUsername(ctx, username)
	}
	mmGetUserByUsername.t.Fatalf("Unexpected call to IUserRepositoryMock.GetUserByUsername. %v %v", ctx, username)
	return
}

// GetUserByUsernameAfterCounter returns a count of finished IUserRepositoryMock.GetUserByUsername invocations
func (mmGetUserByUsername *IUserRepositoryMock) GetUserByUsernameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByUsername.afterGetUserByUsernameCounter)
}

// GetUserByUsernameBeforeCounter returns a count of IUserRepositoryMock.GetUserByUsername invocations
func (mmGetUserByUsername *IUserRepositoryMock) GetUserByUsernameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByUsername.beforeGetUserByUsernameCounter)
}

// Calls returns a list of arguments used in each call to IUserRepositoryMock.GetUserByUsername.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByUsername *mIUserRepositoryMockGetUserByUsername) Calls() []*IUserRepositoryMockGetUserByUsernameParams {
	mmGetUserByUsername.mutex.RLock()

	argCopy := make([]*IUserRepositoryMockGetUserByUsernameParams, len(mmGetUserByUsername.callArgs))
	copy(argCopy, mmGetUserByUsername.callArgs)

	mmGetUserByUsername.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByUsernameDone returns true if the count of the GetUserByUsername invocations corresponds
// the number of defined expectations
func (m *IUserRepositoryMock) MinimockGetUserByUsernameDone() bool {
	for _, e := range m.GetUserByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByUsernameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserByUsernameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByUsername != nil && mm_atomic.LoadUint64(&m.afterGetUserByUsernameCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetUserByUsernameInspect logs each unmet expectation
func (m *IUserRepositoryMock) MinimockGetUserByUsernameInspect() {
	for _, e := range m.GetUserByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserRepositoryMock.GetUserByUsername with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByUsernameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserByUsernameCounter) < 1 {
		if m.GetUserByUsernameMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserRepositoryMock.GetUserByUsername")
		} else {
			m.t.Errorf("Expected call to IUserRepositoryMock.GetUserByUsername with params: %#v", *m.GetUserByUsernameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByUsername != nil && mm_atomic.LoadUint64(&m.afterGetUserByUsernameCounter) < 1 {
		m.t.Error("Expected call to IUserRepositoryMock.GetUserByUsername")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IUserRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateUserInspect()

		m.MinimockGetUserByIDInspect()

		m.MinimockGetUserByUsernameInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IUserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IUserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone() &&
		m.MinimockGetUserByIDDone() &&
		m.MinimockGetUserByUsernameDone()
}
