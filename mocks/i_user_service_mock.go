package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.com/amiiit/arco/user.IUserService -o ./i_user_service_mock.go

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_user "gitlab.com/amiiit/arco/user"
)

// IUserServiceMock implements user.IUserService
type IUserServiceMock struct {
	t minimock.Tester

	funcCreateSession          func(ctx context.Context, username string) (s1 mm_user.Session, err error)
	inspectFuncCreateSession   func(ctx context.Context, username string)
	afterCreateSessionCounter  uint64
	beforeCreateSessionCounter uint64
	CreateSessionMock          mIUserServiceMockCreateSession

	funcSetUserPassword          func(user mm_user.User, password string) (u1 mm_user.User, err error)
	inspectFuncSetUserPassword   func(user mm_user.User, password string)
	afterSetUserPasswordCounter  uint64
	beforeSetUserPasswordCounter uint64
	SetUserPasswordMock          mIUserServiceMockSetUserPassword

	funcValidatePassword          func(ctx context.Context, username string, password string) (err error)
	inspectFuncValidatePassword   func(ctx context.Context, username string, password string)
	afterValidatePasswordCounter  uint64
	beforeValidatePasswordCounter uint64
	ValidatePasswordMock          mIUserServiceMockValidatePassword
}

// NewIUserServiceMock returns a mock for user.IUserService
func NewIUserServiceMock(t minimock.Tester) *IUserServiceMock {
	m := &IUserServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateSessionMock = mIUserServiceMockCreateSession{mock: m}
	m.CreateSessionMock.callArgs = []*IUserServiceMockCreateSessionParams{}

	m.SetUserPasswordMock = mIUserServiceMockSetUserPassword{mock: m}
	m.SetUserPasswordMock.callArgs = []*IUserServiceMockSetUserPasswordParams{}

	m.ValidatePasswordMock = mIUserServiceMockValidatePassword{mock: m}
	m.ValidatePasswordMock.callArgs = []*IUserServiceMockValidatePasswordParams{}

	return m
}

type mIUserServiceMockCreateSession struct {
	mock               *IUserServiceMock
	defaultExpectation *IUserServiceMockCreateSessionExpectation
	expectations       []*IUserServiceMockCreateSessionExpectation

	callArgs []*IUserServiceMockCreateSessionParams
	mutex    sync.RWMutex
}

// IUserServiceMockCreateSessionExpectation specifies expectation struct of the IUserService.CreateSession
type IUserServiceMockCreateSessionExpectation struct {
	mock    *IUserServiceMock
	params  *IUserServiceMockCreateSessionParams
	results *IUserServiceMockCreateSessionResults
	Counter uint64
}

// IUserServiceMockCreateSessionParams contains parameters of the IUserService.CreateSession
type IUserServiceMockCreateSessionParams struct {
	ctx      context.Context
	username string
}

// IUserServiceMockCreateSessionResults contains results of the IUserService.CreateSession
type IUserServiceMockCreateSessionResults struct {
	s1  mm_user.Session
	err error
}

// Expect sets up expected params for IUserService.CreateSession
func (mmCreateSession *mIUserServiceMockCreateSession) Expect(ctx context.Context, username string) *mIUserServiceMockCreateSession {
	if mmCreateSession.mock.funcCreateSession != nil {
		mmCreateSession.mock.t.Fatalf("IUserServiceMock.CreateSession mock is already set by Set")
	}

	if mmCreateSession.defaultExpectation == nil {
		mmCreateSession.defaultExpectation = &IUserServiceMockCreateSessionExpectation{}
	}

	mmCreateSession.defaultExpectation.params = &IUserServiceMockCreateSessionParams{ctx, username}
	for _, e := range mmCreateSession.expectations {
		if minimock.Equal(e.params, mmCreateSession.defaultExpectation.params) {
			mmCreateSession.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateSession.defaultExpectation.params)
		}
	}

	return mmCreateSession
}

// Inspect accepts an inspector function that has same arguments as the IUserService.CreateSession
func (mmCreateSession *mIUserServiceMockCreateSession) Inspect(f func(ctx context.Context, username string)) *mIUserServiceMockCreateSession {
	if mmCreateSession.mock.inspectFuncCreateSession != nil {
		mmCreateSession.mock.t.Fatalf("Inspect function is already set for IUserServiceMock.CreateSession")
	}

	mmCreateSession.mock.inspectFuncCreateSession = f

	return mmCreateSession
}

// Return sets up results that will be returned by IUserService.CreateSession
func (mmCreateSession *mIUserServiceMockCreateSession) Return(s1 mm_user.Session, err error) *IUserServiceMock {
	if mmCreateSession.mock.funcCreateSession != nil {
		mmCreateSession.mock.t.Fatalf("IUserServiceMock.CreateSession mock is already set by Set")
	}

	if mmCreateSession.defaultExpectation == nil {
		mmCreateSession.defaultExpectation = &IUserServiceMockCreateSessionExpectation{mock: mmCreateSession.mock}
	}
	mmCreateSession.defaultExpectation.results = &IUserServiceMockCreateSessionResults{s1, err}
	return mmCreateSession.mock
}

//Set uses given function f to mock the IUserService.CreateSession method
func (mmCreateSession *mIUserServiceMockCreateSession) Set(f func(ctx context.Context, username string) (s1 mm_user.Session, err error)) *IUserServiceMock {
	if mmCreateSession.defaultExpectation != nil {
		mmCreateSession.mock.t.Fatalf("Default expectation is already set for the IUserService.CreateSession method")
	}

	if len(mmCreateSession.expectations) > 0 {
		mmCreateSession.mock.t.Fatalf("Some expectations are already set for the IUserService.CreateSession method")
	}

	mmCreateSession.mock.funcCreateSession = f
	return mmCreateSession.mock
}

// When sets expectation for the IUserService.CreateSession which will trigger the result defined by the following
// Then helper
func (mmCreateSession *mIUserServiceMockCreateSession) When(ctx context.Context, username string) *IUserServiceMockCreateSessionExpectation {
	if mmCreateSession.mock.funcCreateSession != nil {
		mmCreateSession.mock.t.Fatalf("IUserServiceMock.CreateSession mock is already set by Set")
	}

	expectation := &IUserServiceMockCreateSessionExpectation{
		mock:   mmCreateSession.mock,
		params: &IUserServiceMockCreateSessionParams{ctx, username},
	}
	mmCreateSession.expectations = append(mmCreateSession.expectations, expectation)
	return expectation
}

// Then sets up IUserService.CreateSession return parameters for the expectation previously defined by the When method
func (e *IUserServiceMockCreateSessionExpectation) Then(s1 mm_user.Session, err error) *IUserServiceMock {
	e.results = &IUserServiceMockCreateSessionResults{s1, err}
	return e.mock
}

// CreateSession implements user.IUserService
func (mmCreateSession *IUserServiceMock) CreateSession(ctx context.Context, username string) (s1 mm_user.Session, err error) {
	mm_atomic.AddUint64(&mmCreateSession.beforeCreateSessionCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateSession.afterCreateSessionCounter, 1)

	if mmCreateSession.inspectFuncCreateSession != nil {
		mmCreateSession.inspectFuncCreateSession(ctx, username)
	}

	mm_params := &IUserServiceMockCreateSessionParams{ctx, username}

	// Record call args
	mmCreateSession.CreateSessionMock.mutex.Lock()
	mmCreateSession.CreateSessionMock.callArgs = append(mmCreateSession.CreateSessionMock.callArgs, mm_params)
	mmCreateSession.CreateSessionMock.mutex.Unlock()

	for _, e := range mmCreateSession.CreateSessionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmCreateSession.CreateSessionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateSession.CreateSessionMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateSession.CreateSessionMock.defaultExpectation.params
		mm_got := IUserServiceMockCreateSessionParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateSession.t.Errorf("IUserServiceMock.CreateSession got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateSession.CreateSessionMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateSession.t.Fatal("No results are set for the IUserServiceMock.CreateSession")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmCreateSession.funcCreateSession != nil {
		return mmCreateSession.funcCreateSession(ctx, username)
	}
	mmCreateSession.t.Fatalf("Unexpected call to IUserServiceMock.CreateSession. %v %v", ctx, username)
	return
}

// CreateSessionAfterCounter returns a count of finished IUserServiceMock.CreateSession invocations
func (mmCreateSession *IUserServiceMock) CreateSessionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateSession.afterCreateSessionCounter)
}

// CreateSessionBeforeCounter returns a count of IUserServiceMock.CreateSession invocations
func (mmCreateSession *IUserServiceMock) CreateSessionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateSession.beforeCreateSessionCounter)
}

// Calls returns a list of arguments used in each call to IUserServiceMock.CreateSession.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateSession *mIUserServiceMockCreateSession) Calls() []*IUserServiceMockCreateSessionParams {
	mmCreateSession.mutex.RLock()

	argCopy := make([]*IUserServiceMockCreateSessionParams, len(mmCreateSession.callArgs))
	copy(argCopy, mmCreateSession.callArgs)

	mmCreateSession.mutex.RUnlock()

	return argCopy
}

// MinimockCreateSessionDone returns true if the count of the CreateSession invocations corresponds
// the number of defined expectations
func (m *IUserServiceMock) MinimockCreateSessionDone() bool {
	for _, e := range m.CreateSessionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateSessionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateSessionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateSession != nil && mm_atomic.LoadUint64(&m.afterCreateSessionCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateSessionInspect logs each unmet expectation
func (m *IUserServiceMock) MinimockCreateSessionInspect() {
	for _, e := range m.CreateSessionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserServiceMock.CreateSession with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateSessionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateSessionCounter) < 1 {
		if m.CreateSessionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserServiceMock.CreateSession")
		} else {
			m.t.Errorf("Expected call to IUserServiceMock.CreateSession with params: %#v", *m.CreateSessionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateSession != nil && mm_atomic.LoadUint64(&m.afterCreateSessionCounter) < 1 {
		m.t.Error("Expected call to IUserServiceMock.CreateSession")
	}
}

type mIUserServiceMockSetUserPassword struct {
	mock               *IUserServiceMock
	defaultExpectation *IUserServiceMockSetUserPasswordExpectation
	expectations       []*IUserServiceMockSetUserPasswordExpectation

	callArgs []*IUserServiceMockSetUserPasswordParams
	mutex    sync.RWMutex
}

// IUserServiceMockSetUserPasswordExpectation specifies expectation struct of the IUserService.SetUserPassword
type IUserServiceMockSetUserPasswordExpectation struct {
	mock    *IUserServiceMock
	params  *IUserServiceMockSetUserPasswordParams
	results *IUserServiceMockSetUserPasswordResults
	Counter uint64
}

// IUserServiceMockSetUserPasswordParams contains parameters of the IUserService.SetUserPassword
type IUserServiceMockSetUserPasswordParams struct {
	user     mm_user.User
	password string
}

// IUserServiceMockSetUserPasswordResults contains results of the IUserService.SetUserPassword
type IUserServiceMockSetUserPasswordResults struct {
	u1  mm_user.User
	err error
}

// Expect sets up expected params for IUserService.SetUserPassword
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Expect(user mm_user.User, password string) *mIUserServiceMockSetUserPassword {
	if mmSetUserPassword.mock.funcSetUserPassword != nil {
		mmSetUserPassword.mock.t.Fatalf("IUserServiceMock.SetUserPassword mock is already set by Set")
	}

	if mmSetUserPassword.defaultExpectation == nil {
		mmSetUserPassword.defaultExpectation = &IUserServiceMockSetUserPasswordExpectation{}
	}

	mmSetUserPassword.defaultExpectation.params = &IUserServiceMockSetUserPasswordParams{user, password}
	for _, e := range mmSetUserPassword.expectations {
		if minimock.Equal(e.params, mmSetUserPassword.defaultExpectation.params) {
			mmSetUserPassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetUserPassword.defaultExpectation.params)
		}
	}

	return mmSetUserPassword
}

// Inspect accepts an inspector function that has same arguments as the IUserService.SetUserPassword
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Inspect(f func(user mm_user.User, password string)) *mIUserServiceMockSetUserPassword {
	if mmSetUserPassword.mock.inspectFuncSetUserPassword != nil {
		mmSetUserPassword.mock.t.Fatalf("Inspect function is already set for IUserServiceMock.SetUserPassword")
	}

	mmSetUserPassword.mock.inspectFuncSetUserPassword = f

	return mmSetUserPassword
}

// Return sets up results that will be returned by IUserService.SetUserPassword
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Return(u1 mm_user.User, err error) *IUserServiceMock {
	if mmSetUserPassword.mock.funcSetUserPassword != nil {
		mmSetUserPassword.mock.t.Fatalf("IUserServiceMock.SetUserPassword mock is already set by Set")
	}

	if mmSetUserPassword.defaultExpectation == nil {
		mmSetUserPassword.defaultExpectation = &IUserServiceMockSetUserPasswordExpectation{mock: mmSetUserPassword.mock}
	}
	mmSetUserPassword.defaultExpectation.results = &IUserServiceMockSetUserPasswordResults{u1, err}
	return mmSetUserPassword.mock
}

//Set uses given function f to mock the IUserService.SetUserPassword method
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Set(f func(user mm_user.User, password string) (u1 mm_user.User, err error)) *IUserServiceMock {
	if mmSetUserPassword.defaultExpectation != nil {
		mmSetUserPassword.mock.t.Fatalf("Default expectation is already set for the IUserService.SetUserPassword method")
	}

	if len(mmSetUserPassword.expectations) > 0 {
		mmSetUserPassword.mock.t.Fatalf("Some expectations are already set for the IUserService.SetUserPassword method")
	}

	mmSetUserPassword.mock.funcSetUserPassword = f
	return mmSetUserPassword.mock
}

// When sets expectation for the IUserService.SetUserPassword which will trigger the result defined by the following
// Then helper
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) When(user mm_user.User, password string) *IUserServiceMockSetUserPasswordExpectation {
	if mmSetUserPassword.mock.funcSetUserPassword != nil {
		mmSetUserPassword.mock.t.Fatalf("IUserServiceMock.SetUserPassword mock is already set by Set")
	}

	expectation := &IUserServiceMockSetUserPasswordExpectation{
		mock:   mmSetUserPassword.mock,
		params: &IUserServiceMockSetUserPasswordParams{user, password},
	}
	mmSetUserPassword.expectations = append(mmSetUserPassword.expectations, expectation)
	return expectation
}

// Then sets up IUserService.SetUserPassword return parameters for the expectation previously defined by the When method
func (e *IUserServiceMockSetUserPasswordExpectation) Then(u1 mm_user.User, err error) *IUserServiceMock {
	e.results = &IUserServiceMockSetUserPasswordResults{u1, err}
	return e.mock
}

// SetUserPassword implements user.IUserService
func (mmSetUserPassword *IUserServiceMock) SetUserPassword(user mm_user.User, password string) (u1 mm_user.User, err error) {
	mm_atomic.AddUint64(&mmSetUserPassword.beforeSetUserPasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmSetUserPassword.afterSetUserPasswordCounter, 1)

	if mmSetUserPassword.inspectFuncSetUserPassword != nil {
		mmSetUserPassword.inspectFuncSetUserPassword(user, password)
	}

	mm_params := &IUserServiceMockSetUserPasswordParams{user, password}

	// Record call args
	mmSetUserPassword.SetUserPasswordMock.mutex.Lock()
	mmSetUserPassword.SetUserPasswordMock.callArgs = append(mmSetUserPassword.SetUserPasswordMock.callArgs, mm_params)
	mmSetUserPassword.SetUserPasswordMock.mutex.Unlock()

	for _, e := range mmSetUserPassword.SetUserPasswordMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmSetUserPassword.SetUserPasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetUserPassword.SetUserPasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmSetUserPassword.SetUserPasswordMock.defaultExpectation.params
		mm_got := IUserServiceMockSetUserPasswordParams{user, password}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetUserPassword.t.Errorf("IUserServiceMock.SetUserPassword got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetUserPassword.SetUserPasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmSetUserPassword.t.Fatal("No results are set for the IUserServiceMock.SetUserPassword")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmSetUserPassword.funcSetUserPassword != nil {
		return mmSetUserPassword.funcSetUserPassword(user, password)
	}
	mmSetUserPassword.t.Fatalf("Unexpected call to IUserServiceMock.SetUserPassword. %v %v", user, password)
	return
}

// SetUserPasswordAfterCounter returns a count of finished IUserServiceMock.SetUserPassword invocations
func (mmSetUserPassword *IUserServiceMock) SetUserPasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetUserPassword.afterSetUserPasswordCounter)
}

// SetUserPasswordBeforeCounter returns a count of IUserServiceMock.SetUserPassword invocations
func (mmSetUserPassword *IUserServiceMock) SetUserPasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetUserPassword.beforeSetUserPasswordCounter)
}

// Calls returns a list of arguments used in each call to IUserServiceMock.SetUserPassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Calls() []*IUserServiceMockSetUserPasswordParams {
	mmSetUserPassword.mutex.RLock()

	argCopy := make([]*IUserServiceMockSetUserPasswordParams, len(mmSetUserPassword.callArgs))
	copy(argCopy, mmSetUserPassword.callArgs)

	mmSetUserPassword.mutex.RUnlock()

	return argCopy
}

// MinimockSetUserPasswordDone returns true if the count of the SetUserPassword invocations corresponds
// the number of defined expectations
func (m *IUserServiceMock) MinimockSetUserPasswordDone() bool {
	for _, e := range m.SetUserPasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetUserPasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetUserPasswordCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetUserPassword != nil && mm_atomic.LoadUint64(&m.afterSetUserPasswordCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetUserPasswordInspect logs each unmet expectation
func (m *IUserServiceMock) MinimockSetUserPasswordInspect() {
	for _, e := range m.SetUserPasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserServiceMock.SetUserPassword with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetUserPasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetUserPasswordCounter) < 1 {
		if m.SetUserPasswordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserServiceMock.SetUserPassword")
		} else {
			m.t.Errorf("Expected call to IUserServiceMock.SetUserPassword with params: %#v", *m.SetUserPasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetUserPassword != nil && mm_atomic.LoadUint64(&m.afterSetUserPasswordCounter) < 1 {
		m.t.Error("Expected call to IUserServiceMock.SetUserPassword")
	}
}

type mIUserServiceMockValidatePassword struct {
	mock               *IUserServiceMock
	defaultExpectation *IUserServiceMockValidatePasswordExpectation
	expectations       []*IUserServiceMockValidatePasswordExpectation

	callArgs []*IUserServiceMockValidatePasswordParams
	mutex    sync.RWMutex
}

// IUserServiceMockValidatePasswordExpectation specifies expectation struct of the IUserService.ValidatePassword
type IUserServiceMockValidatePasswordExpectation struct {
	mock    *IUserServiceMock
	params  *IUserServiceMockValidatePasswordParams
	results *IUserServiceMockValidatePasswordResults
	Counter uint64
}

// IUserServiceMockValidatePasswordParams contains parameters of the IUserService.ValidatePassword
type IUserServiceMockValidatePasswordParams struct {
	ctx      context.Context
	username string
	password string
}

// IUserServiceMockValidatePasswordResults contains results of the IUserService.ValidatePassword
type IUserServiceMockValidatePasswordResults struct {
	err error
}

// Expect sets up expected params for IUserService.ValidatePassword
func (mmValidatePassword *mIUserServiceMockValidatePassword) Expect(ctx context.Context, username string, password string) *mIUserServiceMockValidatePassword {
	if mmValidatePassword.mock.funcValidatePassword != nil {
		mmValidatePassword.mock.t.Fatalf("IUserServiceMock.ValidatePassword mock is already set by Set")
	}

	if mmValidatePassword.defaultExpectation == nil {
		mmValidatePassword.defaultExpectation = &IUserServiceMockValidatePasswordExpectation{}
	}

	mmValidatePassword.defaultExpectation.params = &IUserServiceMockValidatePasswordParams{ctx, username, password}
	for _, e := range mmValidatePassword.expectations {
		if minimock.Equal(e.params, mmValidatePassword.defaultExpectation.params) {
			mmValidatePassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidatePassword.defaultExpectation.params)
		}
	}

	return mmValidatePassword
}

// Inspect accepts an inspector function that has same arguments as the IUserService.ValidatePassword
func (mmValidatePassword *mIUserServiceMockValidatePassword) Inspect(f func(ctx context.Context, username string, password string)) *mIUserServiceMockValidatePassword {
	if mmValidatePassword.mock.inspectFuncValidatePassword != nil {
		mmValidatePassword.mock.t.Fatalf("Inspect function is already set for IUserServiceMock.ValidatePassword")
	}

	mmValidatePassword.mock.inspectFuncValidatePassword = f

	return mmValidatePassword
}

// Return sets up results that will be returned by IUserService.ValidatePassword
func (mmValidatePassword *mIUserServiceMockValidatePassword) Return(err error) *IUserServiceMock {
	if mmValidatePassword.mock.funcValidatePassword != nil {
		mmValidatePassword.mock.t.Fatalf("IUserServiceMock.ValidatePassword mock is already set by Set")
	}

	if mmValidatePassword.defaultExpectation == nil {
		mmValidatePassword.defaultExpectation = &IUserServiceMockValidatePasswordExpectation{mock: mmValidatePassword.mock}
	}
	mmValidatePassword.defaultExpectation.results = &IUserServiceMockValidatePasswordResults{err}
	return mmValidatePassword.mock
}

//Set uses given function f to mock the IUserService.ValidatePassword method
func (mmValidatePassword *mIUserServiceMockValidatePassword) Set(f func(ctx context.Context, username string, password string) (err error)) *IUserServiceMock {
	if mmValidatePassword.defaultExpectation != nil {
		mmValidatePassword.mock.t.Fatalf("Default expectation is already set for the IUserService.ValidatePassword method")
	}

	if len(mmValidatePassword.expectations) > 0 {
		mmValidatePassword.mock.t.Fatalf("Some expectations are already set for the IUserService.ValidatePassword method")
	}

	mmValidatePassword.mock.funcValidatePassword = f
	return mmValidatePassword.mock
}

// When sets expectation for the IUserService.ValidatePassword which will trigger the result defined by the following
// Then helper
func (mmValidatePassword *mIUserServiceMockValidatePassword) When(ctx context.Context, username string, password string) *IUserServiceMockValidatePasswordExpectation {
	if mmValidatePassword.mock.funcValidatePassword != nil {
		mmValidatePassword.mock.t.Fatalf("IUserServiceMock.ValidatePassword mock is already set by Set")
	}

	expectation := &IUserServiceMockValidatePasswordExpectation{
		mock:   mmValidatePassword.mock,
		params: &IUserServiceMockValidatePasswordParams{ctx, username, password},
	}
	mmValidatePassword.expectations = append(mmValidatePassword.expectations, expectation)
	return expectation
}

// Then sets up IUserService.ValidatePassword return parameters for the expectation previously defined by the When method
func (e *IUserServiceMockValidatePasswordExpectation) Then(err error) *IUserServiceMock {
	e.results = &IUserServiceMockValidatePasswordResults{err}
	return e.mock
}

// ValidatePassword implements user.IUserService
func (mmValidatePassword *IUserServiceMock) ValidatePassword(ctx context.Context, username string, password string) (err error) {
	mm_atomic.AddUint64(&mmValidatePassword.beforeValidatePasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmValidatePassword.afterValidatePasswordCounter, 1)

	if mmValidatePassword.inspectFuncValidatePassword != nil {
		mmValidatePassword.inspectFuncValidatePassword(ctx, username, password)
	}

	mm_params := &IUserServiceMockValidatePasswordParams{ctx, username, password}

	// Record call args
	mmValidatePassword.ValidatePasswordMock.mutex.Lock()
	mmValidatePassword.ValidatePasswordMock.callArgs = append(mmValidatePassword.ValidatePasswordMock.callArgs, mm_params)
	mmValidatePassword.ValidatePasswordMock.mutex.Unlock()

	for _, e := range mmValidatePassword.ValidatePasswordMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmValidatePassword.ValidatePasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidatePassword.ValidatePasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmValidatePassword.ValidatePasswordMock.defaultExpectation.params
		mm_got := IUserServiceMockValidatePasswordParams{ctx, username, password}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidatePassword.t.Errorf("IUserServiceMock.ValidatePassword got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidatePassword.ValidatePasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmValidatePassword.t.Fatal("No results are set for the IUserServiceMock.ValidatePassword")
		}
		return (*mm_results).err
	}
	if mmValidatePassword.funcValidatePassword != nil {
		return mmValidatePassword.funcValidatePassword(ctx, username, password)
	}
	mmValidatePassword.t.Fatalf("Unexpected call to IUserServiceMock.ValidatePassword. %v %v %v", ctx, username, password)
	return
}

// ValidatePasswordAfterCounter returns a count of finished IUserServiceMock.ValidatePassword invocations
func (mmValidatePassword *IUserServiceMock) ValidatePasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidatePassword.afterValidatePasswordCounter)
}

// ValidatePasswordBeforeCounter returns a count of IUserServiceMock.ValidatePassword invocations
func (mmValidatePassword *IUserServiceMock) ValidatePasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidatePassword.beforeValidatePasswordCounter)
}

// Calls returns a list of arguments used in each call to IUserServiceMock.ValidatePassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidatePassword *mIUserServiceMockValidatePassword) Calls() []*IUserServiceMockValidatePasswordParams {
	mmValidatePassword.mutex.RLock()

	argCopy := make([]*IUserServiceMockValidatePasswordParams, len(mmValidatePassword.callArgs))
	copy(argCopy, mmValidatePassword.callArgs)

	mmValidatePassword.mutex.RUnlock()

	return argCopy
}

// MinimockValidatePasswordDone returns true if the count of the ValidatePassword invocations corresponds
// the number of defined expectations
func (m *IUserServiceMock) MinimockValidatePasswordDone() bool {
	for _, e := range m.ValidatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ValidatePasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterValidatePasswordCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidatePassword != nil && mm_atomic.LoadUint64(&m.afterValidatePasswordCounter) < 1 {
		return false
	}
	return true
}

// MinimockValidatePasswordInspect logs each unmet expectation
func (m *IUserServiceMock) MinimockValidatePasswordInspect() {
	for _, e := range m.ValidatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserServiceMock.ValidatePassword with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ValidatePasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterValidatePasswordCounter) < 1 {
		if m.ValidatePasswordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserServiceMock.ValidatePassword")
		} else {
			m.t.Errorf("Expected call to IUserServiceMock.ValidatePassword with params: %#v", *m.ValidatePasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidatePassword != nil && mm_atomic.LoadUint64(&m.afterValidatePasswordCounter) < 1 {
		m.t.Error("Expected call to IUserServiceMock.ValidatePassword")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IUserServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateSessionInspect()

		m.MinimockSetUserPasswordInspect()

		m.MinimockValidatePasswordInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IUserServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IUserServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateSessionDone() &&
		m.MinimockSetUserPasswordDone() &&
		m.MinimockValidatePasswordDone()
}
