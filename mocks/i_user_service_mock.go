package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.com/amiiit/arco/user.IUserService -o ./i_user_service_mock.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_user "gitlab.com/amiiit/arco/user"
)

// IUserServiceMock implements user.IUserService
type IUserServiceMock struct {
	t minimock.Tester

	funcSetUserPassword          func(user mm_user.User, password string) (u1 mm_user.User, err error)
	inspectFuncSetUserPassword   func(user mm_user.User, password string)
	afterSetUserPasswordCounter  uint64
	beforeSetUserPasswordCounter uint64
	SetUserPasswordMock          mIUserServiceMockSetUserPassword
}

// NewIUserServiceMock returns a mock for user.IUserService
func NewIUserServiceMock(t minimock.Tester) *IUserServiceMock {
	m := &IUserServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SetUserPasswordMock = mIUserServiceMockSetUserPassword{mock: m}
	m.SetUserPasswordMock.callArgs = []*IUserServiceMockSetUserPasswordParams{}

	return m
}

type mIUserServiceMockSetUserPassword struct {
	mock               *IUserServiceMock
	defaultExpectation *IUserServiceMockSetUserPasswordExpectation
	expectations       []*IUserServiceMockSetUserPasswordExpectation

	callArgs []*IUserServiceMockSetUserPasswordParams
	mutex    sync.RWMutex
}

// IUserServiceMockSetUserPasswordExpectation specifies expectation struct of the IUserService.SetUserPassword
type IUserServiceMockSetUserPasswordExpectation struct {
	mock    *IUserServiceMock
	params  *IUserServiceMockSetUserPasswordParams
	results *IUserServiceMockSetUserPasswordResults
	Counter uint64
}

// IUserServiceMockSetUserPasswordParams contains parameters of the IUserService.SetUserPassword
type IUserServiceMockSetUserPasswordParams struct {
	user     mm_user.User
	password string
}

// IUserServiceMockSetUserPasswordResults contains results of the IUserService.SetUserPassword
type IUserServiceMockSetUserPasswordResults struct {
	u1  mm_user.User
	err error
}

// Expect sets up expected params for IUserService.SetUserPassword
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Expect(user mm_user.User, password string) *mIUserServiceMockSetUserPassword {
	if mmSetUserPassword.mock.funcSetUserPassword != nil {
		mmSetUserPassword.mock.t.Fatalf("IUserServiceMock.SetUserPassword mock is already set by Set")
	}

	if mmSetUserPassword.defaultExpectation == nil {
		mmSetUserPassword.defaultExpectation = &IUserServiceMockSetUserPasswordExpectation{}
	}

	mmSetUserPassword.defaultExpectation.params = &IUserServiceMockSetUserPasswordParams{user, password}
	for _, e := range mmSetUserPassword.expectations {
		if minimock.Equal(e.params, mmSetUserPassword.defaultExpectation.params) {
			mmSetUserPassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetUserPassword.defaultExpectation.params)
		}
	}

	return mmSetUserPassword
}

// Inspect accepts an inspector function that has same arguments as the IUserService.SetUserPassword
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Inspect(f func(user mm_user.User, password string)) *mIUserServiceMockSetUserPassword {
	if mmSetUserPassword.mock.inspectFuncSetUserPassword != nil {
		mmSetUserPassword.mock.t.Fatalf("Inspect function is already set for IUserServiceMock.SetUserPassword")
	}

	mmSetUserPassword.mock.inspectFuncSetUserPassword = f

	return mmSetUserPassword
}

// Return sets up results that will be returned by IUserService.SetUserPassword
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Return(u1 mm_user.User, err error) *IUserServiceMock {
	if mmSetUserPassword.mock.funcSetUserPassword != nil {
		mmSetUserPassword.mock.t.Fatalf("IUserServiceMock.SetUserPassword mock is already set by Set")
	}

	if mmSetUserPassword.defaultExpectation == nil {
		mmSetUserPassword.defaultExpectation = &IUserServiceMockSetUserPasswordExpectation{mock: mmSetUserPassword.mock}
	}
	mmSetUserPassword.defaultExpectation.results = &IUserServiceMockSetUserPasswordResults{u1, err}
	return mmSetUserPassword.mock
}

//Set uses given function f to mock the IUserService.SetUserPassword method
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Set(f func(user mm_user.User, password string) (u1 mm_user.User, err error)) *IUserServiceMock {
	if mmSetUserPassword.defaultExpectation != nil {
		mmSetUserPassword.mock.t.Fatalf("Default expectation is already set for the IUserService.SetUserPassword method")
	}

	if len(mmSetUserPassword.expectations) > 0 {
		mmSetUserPassword.mock.t.Fatalf("Some expectations are already set for the IUserService.SetUserPassword method")
	}

	mmSetUserPassword.mock.funcSetUserPassword = f
	return mmSetUserPassword.mock
}

// When sets expectation for the IUserService.SetUserPassword which will trigger the result defined by the following
// Then helper
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) When(user mm_user.User, password string) *IUserServiceMockSetUserPasswordExpectation {
	if mmSetUserPassword.mock.funcSetUserPassword != nil {
		mmSetUserPassword.mock.t.Fatalf("IUserServiceMock.SetUserPassword mock is already set by Set")
	}

	expectation := &IUserServiceMockSetUserPasswordExpectation{
		mock:   mmSetUserPassword.mock,
		params: &IUserServiceMockSetUserPasswordParams{user, password},
	}
	mmSetUserPassword.expectations = append(mmSetUserPassword.expectations, expectation)
	return expectation
}

// Then sets up IUserService.SetUserPassword return parameters for the expectation previously defined by the When method
func (e *IUserServiceMockSetUserPasswordExpectation) Then(u1 mm_user.User, err error) *IUserServiceMock {
	e.results = &IUserServiceMockSetUserPasswordResults{u1, err}
	return e.mock
}

// SetUserPassword implements user.IUserService
func (mmSetUserPassword *IUserServiceMock) SetUserPassword(user mm_user.User, password string) (u1 mm_user.User, err error) {
	mm_atomic.AddUint64(&mmSetUserPassword.beforeSetUserPasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmSetUserPassword.afterSetUserPasswordCounter, 1)

	if mmSetUserPassword.inspectFuncSetUserPassword != nil {
		mmSetUserPassword.inspectFuncSetUserPassword(user, password)
	}

	mm_params := &IUserServiceMockSetUserPasswordParams{user, password}

	// Record call args
	mmSetUserPassword.SetUserPasswordMock.mutex.Lock()
	mmSetUserPassword.SetUserPasswordMock.callArgs = append(mmSetUserPassword.SetUserPasswordMock.callArgs, mm_params)
	mmSetUserPassword.SetUserPasswordMock.mutex.Unlock()

	for _, e := range mmSetUserPassword.SetUserPasswordMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmSetUserPassword.SetUserPasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetUserPassword.SetUserPasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmSetUserPassword.SetUserPasswordMock.defaultExpectation.params
		mm_got := IUserServiceMockSetUserPasswordParams{user, password}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetUserPassword.t.Errorf("IUserServiceMock.SetUserPassword got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetUserPassword.SetUserPasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmSetUserPassword.t.Fatal("No results are set for the IUserServiceMock.SetUserPassword")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmSetUserPassword.funcSetUserPassword != nil {
		return mmSetUserPassword.funcSetUserPassword(user, password)
	}
	mmSetUserPassword.t.Fatalf("Unexpected call to IUserServiceMock.SetUserPassword. %v %v", user, password)
	return
}

// SetUserPasswordAfterCounter returns a count of finished IUserServiceMock.SetUserPassword invocations
func (mmSetUserPassword *IUserServiceMock) SetUserPasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetUserPassword.afterSetUserPasswordCounter)
}

// SetUserPasswordBeforeCounter returns a count of IUserServiceMock.SetUserPassword invocations
func (mmSetUserPassword *IUserServiceMock) SetUserPasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetUserPassword.beforeSetUserPasswordCounter)
}

// Calls returns a list of arguments used in each call to IUserServiceMock.SetUserPassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetUserPassword *mIUserServiceMockSetUserPassword) Calls() []*IUserServiceMockSetUserPasswordParams {
	mmSetUserPassword.mutex.RLock()

	argCopy := make([]*IUserServiceMockSetUserPasswordParams, len(mmSetUserPassword.callArgs))
	copy(argCopy, mmSetUserPassword.callArgs)

	mmSetUserPassword.mutex.RUnlock()

	return argCopy
}

// MinimockSetUserPasswordDone returns true if the count of the SetUserPassword invocations corresponds
// the number of defined expectations
func (m *IUserServiceMock) MinimockSetUserPasswordDone() bool {
	for _, e := range m.SetUserPasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetUserPasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetUserPasswordCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetUserPassword != nil && mm_atomic.LoadUint64(&m.afterSetUserPasswordCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetUserPasswordInspect logs each unmet expectation
func (m *IUserServiceMock) MinimockSetUserPasswordInspect() {
	for _, e := range m.SetUserPasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserServiceMock.SetUserPassword with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetUserPasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetUserPasswordCounter) < 1 {
		if m.SetUserPasswordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserServiceMock.SetUserPassword")
		} else {
			m.t.Errorf("Expected call to IUserServiceMock.SetUserPassword with params: %#v", *m.SetUserPasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetUserPassword != nil && mm_atomic.LoadUint64(&m.afterSetUserPasswordCounter) < 1 {
		m.t.Error("Expected call to IUserServiceMock.SetUserPassword")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IUserServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSetUserPasswordInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IUserServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IUserServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSetUserPasswordDone()
}
