package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.com/amiiit/arco/user.IUserService -o ./i_user_service_mock.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_user "gitlab.com/amiiit/arco/user"
)

// IUserServiceMock implements user.IUserService
type IUserServiceMock struct {
	t minimock.Tester

	funcCompleteUserObject          func(user mm_user.User, password string) (u1 mm_user.User, err error)
	inspectFuncCompleteUserObject   func(user mm_user.User, password string)
	afterCompleteUserObjectCounter  uint64
	beforeCompleteUserObjectCounter uint64
	CompleteUserObjectMock          mIUserServiceMockCompleteUserObject
}

// NewIUserServiceMock returns a mock for user.IUserService
func NewIUserServiceMock(t minimock.Tester) *IUserServiceMock {
	m := &IUserServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CompleteUserObjectMock = mIUserServiceMockCompleteUserObject{mock: m}
	m.CompleteUserObjectMock.callArgs = []*IUserServiceMockCompleteUserObjectParams{}

	return m
}

type mIUserServiceMockCompleteUserObject struct {
	mock               *IUserServiceMock
	defaultExpectation *IUserServiceMockCompleteUserObjectExpectation
	expectations       []*IUserServiceMockCompleteUserObjectExpectation

	callArgs []*IUserServiceMockCompleteUserObjectParams
	mutex    sync.RWMutex
}

// IUserServiceMockCompleteUserObjectExpectation specifies expectation struct of the IUserService.CompleteUserObject
type IUserServiceMockCompleteUserObjectExpectation struct {
	mock    *IUserServiceMock
	params  *IUserServiceMockCompleteUserObjectParams
	results *IUserServiceMockCompleteUserObjectResults
	Counter uint64
}

// IUserServiceMockCompleteUserObjectParams contains parameters of the IUserService.CompleteUserObject
type IUserServiceMockCompleteUserObjectParams struct {
	user     mm_user.User
	password string
}

// IUserServiceMockCompleteUserObjectResults contains results of the IUserService.CompleteUserObject
type IUserServiceMockCompleteUserObjectResults struct {
	u1  mm_user.User
	err error
}

// Expect sets up expected params for IUserService.CompleteUserObject
func (mmCompleteUserObject *mIUserServiceMockCompleteUserObject) Expect(user mm_user.User, password string) *mIUserServiceMockCompleteUserObject {
	if mmCompleteUserObject.mock.funcCompleteUserObject != nil {
		mmCompleteUserObject.mock.t.Fatalf("IUserServiceMock.CompleteUserObject mock is already set by Set")
	}

	if mmCompleteUserObject.defaultExpectation == nil {
		mmCompleteUserObject.defaultExpectation = &IUserServiceMockCompleteUserObjectExpectation{}
	}

	mmCompleteUserObject.defaultExpectation.params = &IUserServiceMockCompleteUserObjectParams{user, password}
	for _, e := range mmCompleteUserObject.expectations {
		if minimock.Equal(e.params, mmCompleteUserObject.defaultExpectation.params) {
			mmCompleteUserObject.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCompleteUserObject.defaultExpectation.params)
		}
	}

	return mmCompleteUserObject
}

// Inspect accepts an inspector function that has same arguments as the IUserService.CompleteUserObject
func (mmCompleteUserObject *mIUserServiceMockCompleteUserObject) Inspect(f func(user mm_user.User, password string)) *mIUserServiceMockCompleteUserObject {
	if mmCompleteUserObject.mock.inspectFuncCompleteUserObject != nil {
		mmCompleteUserObject.mock.t.Fatalf("Inspect function is already set for IUserServiceMock.CompleteUserObject")
	}

	mmCompleteUserObject.mock.inspectFuncCompleteUserObject = f

	return mmCompleteUserObject
}

// Return sets up results that will be returned by IUserService.CompleteUserObject
func (mmCompleteUserObject *mIUserServiceMockCompleteUserObject) Return(u1 mm_user.User, err error) *IUserServiceMock {
	if mmCompleteUserObject.mock.funcCompleteUserObject != nil {
		mmCompleteUserObject.mock.t.Fatalf("IUserServiceMock.CompleteUserObject mock is already set by Set")
	}

	if mmCompleteUserObject.defaultExpectation == nil {
		mmCompleteUserObject.defaultExpectation = &IUserServiceMockCompleteUserObjectExpectation{mock: mmCompleteUserObject.mock}
	}
	mmCompleteUserObject.defaultExpectation.results = &IUserServiceMockCompleteUserObjectResults{u1, err}
	return mmCompleteUserObject.mock
}

//Set uses given function f to mock the IUserService.CompleteUserObject method
func (mmCompleteUserObject *mIUserServiceMockCompleteUserObject) Set(f func(user mm_user.User, password string) (u1 mm_user.User, err error)) *IUserServiceMock {
	if mmCompleteUserObject.defaultExpectation != nil {
		mmCompleteUserObject.mock.t.Fatalf("Default expectation is already set for the IUserService.CompleteUserObject method")
	}

	if len(mmCompleteUserObject.expectations) > 0 {
		mmCompleteUserObject.mock.t.Fatalf("Some expectations are already set for the IUserService.CompleteUserObject method")
	}

	mmCompleteUserObject.mock.funcCompleteUserObject = f
	return mmCompleteUserObject.mock
}

// When sets expectation for the IUserService.CompleteUserObject which will trigger the result defined by the following
// Then helper
func (mmCompleteUserObject *mIUserServiceMockCompleteUserObject) When(user mm_user.User, password string) *IUserServiceMockCompleteUserObjectExpectation {
	if mmCompleteUserObject.mock.funcCompleteUserObject != nil {
		mmCompleteUserObject.mock.t.Fatalf("IUserServiceMock.CompleteUserObject mock is already set by Set")
	}

	expectation := &IUserServiceMockCompleteUserObjectExpectation{
		mock:   mmCompleteUserObject.mock,
		params: &IUserServiceMockCompleteUserObjectParams{user, password},
	}
	mmCompleteUserObject.expectations = append(mmCompleteUserObject.expectations, expectation)
	return expectation
}

// Then sets up IUserService.CompleteUserObject return parameters for the expectation previously defined by the When method
func (e *IUserServiceMockCompleteUserObjectExpectation) Then(u1 mm_user.User, err error) *IUserServiceMock {
	e.results = &IUserServiceMockCompleteUserObjectResults{u1, err}
	return e.mock
}

// CompleteUserObject implements user.IUserService
func (mmCompleteUserObject *IUserServiceMock) CompleteUserObject(user mm_user.User, password string) (u1 mm_user.User, err error) {
	mm_atomic.AddUint64(&mmCompleteUserObject.beforeCompleteUserObjectCounter, 1)
	defer mm_atomic.AddUint64(&mmCompleteUserObject.afterCompleteUserObjectCounter, 1)

	if mmCompleteUserObject.inspectFuncCompleteUserObject != nil {
		mmCompleteUserObject.inspectFuncCompleteUserObject(user, password)
	}

	mm_params := &IUserServiceMockCompleteUserObjectParams{user, password}

	// Record call args
	mmCompleteUserObject.CompleteUserObjectMock.mutex.Lock()
	mmCompleteUserObject.CompleteUserObjectMock.callArgs = append(mmCompleteUserObject.CompleteUserObjectMock.callArgs, mm_params)
	mmCompleteUserObject.CompleteUserObjectMock.mutex.Unlock()

	for _, e := range mmCompleteUserObject.CompleteUserObjectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmCompleteUserObject.CompleteUserObjectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCompleteUserObject.CompleteUserObjectMock.defaultExpectation.Counter, 1)
		mm_want := mmCompleteUserObject.CompleteUserObjectMock.defaultExpectation.params
		mm_got := IUserServiceMockCompleteUserObjectParams{user, password}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCompleteUserObject.t.Errorf("IUserServiceMock.CompleteUserObject got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCompleteUserObject.CompleteUserObjectMock.defaultExpectation.results
		if mm_results == nil {
			mmCompleteUserObject.t.Fatal("No results are set for the IUserServiceMock.CompleteUserObject")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmCompleteUserObject.funcCompleteUserObject != nil {
		return mmCompleteUserObject.funcCompleteUserObject(user, password)
	}
	mmCompleteUserObject.t.Fatalf("Unexpected call to IUserServiceMock.CompleteUserObject. %v %v", user, password)
	return
}

// CompleteUserObjectAfterCounter returns a count of finished IUserServiceMock.CompleteUserObject invocations
func (mmCompleteUserObject *IUserServiceMock) CompleteUserObjectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCompleteUserObject.afterCompleteUserObjectCounter)
}

// CompleteUserObjectBeforeCounter returns a count of IUserServiceMock.CompleteUserObject invocations
func (mmCompleteUserObject *IUserServiceMock) CompleteUserObjectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCompleteUserObject.beforeCompleteUserObjectCounter)
}

// Calls returns a list of arguments used in each call to IUserServiceMock.CompleteUserObject.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCompleteUserObject *mIUserServiceMockCompleteUserObject) Calls() []*IUserServiceMockCompleteUserObjectParams {
	mmCompleteUserObject.mutex.RLock()

	argCopy := make([]*IUserServiceMockCompleteUserObjectParams, len(mmCompleteUserObject.callArgs))
	copy(argCopy, mmCompleteUserObject.callArgs)

	mmCompleteUserObject.mutex.RUnlock()

	return argCopy
}

// MinimockCompleteUserObjectDone returns true if the count of the CompleteUserObject invocations corresponds
// the number of defined expectations
func (m *IUserServiceMock) MinimockCompleteUserObjectDone() bool {
	for _, e := range m.CompleteUserObjectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CompleteUserObjectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCompleteUserObjectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCompleteUserObject != nil && mm_atomic.LoadUint64(&m.afterCompleteUserObjectCounter) < 1 {
		return false
	}
	return true
}

// MinimockCompleteUserObjectInspect logs each unmet expectation
func (m *IUserServiceMock) MinimockCompleteUserObjectInspect() {
	for _, e := range m.CompleteUserObjectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserServiceMock.CompleteUserObject with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CompleteUserObjectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCompleteUserObjectCounter) < 1 {
		if m.CompleteUserObjectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserServiceMock.CompleteUserObject")
		} else {
			m.t.Errorf("Expected call to IUserServiceMock.CompleteUserObject with params: %#v", *m.CompleteUserObjectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCompleteUserObject != nil && mm_atomic.LoadUint64(&m.afterCompleteUserObjectCounter) < 1 {
		m.t.Error("Expected call to IUserServiceMock.CompleteUserObject")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IUserServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCompleteUserObjectInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IUserServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IUserServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCompleteUserObjectDone()
}
