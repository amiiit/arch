// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type DeleteOfferDescriptionInput struct {
	OfferID  string `json:"offerId"`
	Language string `json:"language"`
}

type Offer struct {
	ID                string              `json:"id"`
	Category          *OfferCategory      `json:"category"`
	Title             string              `json:"title"`
	HourlyPriceFiat   float64             `json:"HourlyPriceFiat"`
	HourlyPriceTokens float64             `json:"HourlyPriceTokens"`
	Descriptions      []*OfferDescription `json:"descriptions"`
	Description       *OfferDescription   `json:"description"`
	PublishedState    PublishedState      `json:"publishedState"`
}

type OfferCategory struct {
	ID     string   `json:"id"`
	Code   string   `json:"code"`
	Offers []*Offer `json:"offers"`
}

type OfferDescription struct {
	ID          string `json:"id"`
	Language    string `json:"language"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

type OfferDescriptionInput struct {
	Language    string `json:"language"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

type OfferInput struct {
	CategoryCode      string  `json:"categoryCode"`
	HourlyPriceFiat   float64 `json:"HourlyPriceFiat"`
	HourlyPriceTokens float64 `json:"HourlyPriceTokens"`
}

type Pagination struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

type RolesInput struct {
	Admin  bool `json:"admin"`
	Member bool `json:"member"`
}

type SetRolesInput struct {
	UserID string   `json:"userId"`
	Roles  []string `json:"roles"`
}

type Transaction struct {
	Sender   *User             `json:"sender"`
	Receiver *User             `json:"receiver"`
	SentAt   int               `json:"sentAt"`
	Status   TransactionStatus `json:"status"`
}

type User struct {
	ID        string     `json:"id"`
	Username  string     `json:"username"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Phone     *string    `json:"phone"`
	Region    *string    `json:"region"`
	Roles     *UserRoles `json:"roles"`
	Offers    []*Offer   `json:"offers"`
	Suspended bool       `json:"suspended"`
}

type UserInput struct {
	Username  string  `json:"username"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	Email     string  `json:"email"`
	Phone     *string `json:"phone"`
	Region    *string `json:"region"`
}

type UserRoles struct {
	Admin  bool `json:"admin"`
	Member bool `json:"member"`
}

type PublishedState string

const (
	PublishedStateDraft            PublishedState = "Draft"
	PublishedStatePublished        PublishedState = "Published"
	PublishedStatePendingReview    PublishedState = "PendingReview"
	PublishedStateChangesRequested PublishedState = "ChangesRequested"
	PublishedStateRejected         PublishedState = "Rejected"
)

var AllPublishedState = []PublishedState{
	PublishedStateDraft,
	PublishedStatePublished,
	PublishedStatePendingReview,
	PublishedStateChangesRequested,
	PublishedStateRejected,
}

func (e PublishedState) IsValid() bool {
	switch e {
	case PublishedStateDraft, PublishedStatePublished, PublishedStatePendingReview, PublishedStateChangesRequested, PublishedStateRejected:
		return true
	}
	return false
}

func (e PublishedState) String() string {
	return string(e)
}

func (e *PublishedState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PublishedState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PublishedState", str)
	}
	return nil
}

func (e PublishedState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionStatus string

const (
	TransactionStatusAccepted TransactionStatus = "accepted"
	TransactionStatusFailed   TransactionStatus = "failed"
	TransactionStatusRejected TransactionStatus = "rejected"
)

var AllTransactionStatus = []TransactionStatus{
	TransactionStatusAccepted,
	TransactionStatusFailed,
	TransactionStatusRejected,
}

func (e TransactionStatus) IsValid() bool {
	switch e {
	case TransactionStatusAccepted, TransactionStatusFailed, TransactionStatusRejected:
		return true
	}
	return false
}

func (e TransactionStatus) String() string {
	return string(e)
}

func (e *TransactionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionStatus", str)
	}
	return nil
}

func (e TransactionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
