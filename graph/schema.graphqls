# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
    id: ID!
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    phone: String
    region: String
    roles: UserRoles
    offers: [Offer!]
    suspended: Boolean!
}

type UserRoles {
    admin: Boolean!
    member: Boolean!
}

directive @hasRole(role: String!) on FIELD_DEFINITION

type OfferCategory {
    id: String!
    code: String!
    offers(pagination: Pagination): [Offer!]!
}

enum PublishedState {
    Draft
    Published
    PendingReview
    ChangesRequested
    Rejected
}

type Offer {
    id: String!
    category: OfferCategory
    title: String!
    HourlyPriceFiat: Float!
    HourlyPriceTokens: Float!
    descriptions: [OfferDescription!]
    description(language: String!): OfferDescription!
    publishedState: PublishedState!
}

type OfferDescription {
    id: String!
    language: String!
    title: String!
    description: String!
}

type Transaction {
    sender: User!
    receiver: User!
    sentAt: Int!
    status: TransactionStatus!
}
enum TransactionStatus {
    accepted
    failed
    rejected
}

input Pagination {
    limit: Int!
    offset: Int!
}

type Query {
    me: User
    users(pagination: Pagination): [User!]
    user(id: ID!): User @hasRole(role: "member")
}

input UserInput {
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    phone: String
    region: String
}

input RolesInput {
    admin: Boolean!
    member: Boolean!
}

input SetRolesInput {
    userId: ID!
    roles:[String!]
}

input OfferInput {
    categoryCode: String!
    HourlyPriceFiat: Float!
    HourlyPriceTokens: Float!
}
input OfferDescriptionInput {
    language: String!
    title: String!
    description: String!
}

input DeleteOfferDescriptionInput {
    offerId: String!
    language: String!
}

type Mutation {
    setOfferDescription(offerId: String!, input: OfferDescriptionInput): Offer! @hasRole(role: "member")
    removeOfferDescription(input: DeleteOfferDescriptionInput!): Offer! @hasRole(role: "member")
    addOffer(input: OfferInput!): User! @hasRole(role: "member")
    editOffer(offerId: String!, input: OfferInput!): Offer! @hasRole(role: "member")
    requestOfferRevision(offerId: String!): Offer! @hasRole(role: "member")

    setOfferPublishedState(offerId: String!, state: PublishedState): Offer! @hasRole(role: "admin")

    addUser(input: UserInput!): User! @hasRole(role: "admin")
    setUserPassword(userId: String!, newPassword: String!): User! @hasRole(role: "admin")
    editUser(userId: String!, input: UserInput!): User! @hasRole(role: "admin")
    setUserRoles(userId: String!, roles: RolesInput!): User! @hasRole(role: "admin")
    setUserSuspended(userId: String!, suspended: Boolean!): User @hasRole(role: "admin")
}